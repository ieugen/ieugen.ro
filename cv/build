#!/bin/bash
set -e

DEBUG=${DEBUG:-false}
$DEBUG && set -x || set +x

LANGUAGE_DIR=${LANGUAGE_DIR:-en}
BASE_DIR=`cd "$(dirname "$0")"; pwd`
RELATIVE_DIR=${BASE_DIR##$BASE_DIR/}/$LANGUAGE_DIR

config=build.conf
[ -f "$BASE_DIR"/$config ] || config=$config.sample
source "$BASE_DIR"/$config

check_tools() {
  local tools="$@"
  local goahead=true
  for tool in $tools
  do
    which $tool &> /dev/null || {
      echo "ERROR: $tool wasn't found in PATH!"
      goahead=false
    }
  done
  $goahead
}

# called automatically when you invoke this script
check_prerequisites() {
  check_tools asciidoctor w3m lynx || exit 1

  if $generate_pdf
  then
    if $use_fopub
    then
      [ -x "$fopub" ] || { echo "ERROR: can't execute $fopub!"; exit 1; }
    else
      check_tools asciidoctor-pdf || exit 1
    fi
  fi
}

# used to remove generated docs (HTML and/or PDF)
_clean() {
  rm -f index.{html,xml}
  rm -f $pdf_name $xml_name
}

# used to build the main doc (HTML and/or PDF)
_all() {
  local result

  _html && _txt
  result=$?

  $generate_pdf || exit $result
  _pdf
}

# used to build the TXT version (cv.txt)
_html() {
  echo "Generating HTML ..."
  asciidoctor -a lang=$LANGUAGE_DIR index.adoc
}

_pdf() {
  echo "Generating PDF ..."
  if $use_fopub
  then
    asciidoctor -b docbook -d book -a data-uri! index.adoc -o $xml_name
    $fopub $xml_name
  else
    asciidoctor-pdf -a lang=$LANGUAGE_DIR -o $pdf_name index.adoc
  fi
}

# used to build the TXT version (cv.txt)
_txt() {
  [ -f index.html ] || {
    echo "index.html must exists!"
    return 1
  }

  echo "Generating TXT ..."

  # Using w3m: (https://github.com/asciidoctor/asciidoctor/issues/1636#issuecomment-167700917)
  w3m -dump -cols 2147483647 index.html > cv.txt

  # Using lynx:
  #lynx -dump -width=1024 -nolist index.html > cv.txt

  # Using html-to-text (https://www.npmjs.com/package/html-to-text)
  #html-to-text < index.html > cv.txt

  # Using html2text (https://github.com/jaytaylor/html2text)
}

# used to publish the generated docs to GitHub Pages
_publish() {
  local published_dir=`mktemp -d`
  local remote_repo=`git config --get remote.origin.url`
  [ ".$remote_repo" = "." ] && {
    echo 'The remote repository is not configured!'
    return 1
  }

  mkdir -p "$published_dir"
  cd "$BASE_DIR"
  rsync -am \
    --include='**/' \
    --include='/ro/*.html' \
    --include='/ro/*.pdf' \
    --include='/ro/*.txt' \
    --include='/en/*.html' \
    --include='/en/*.pdf' \
    --include='/en/*.txt' \
    --include='/en/*.csv' \
    --exclude='*' \
    . "$published_dir"/
  cd - &> /dev/null
  tree -a "$published_dir"

  local msg="Published at `date`"
  cd "$published_dir"
  git init
  git add -A
  git commit -m "$msg"
  git push --force $remote_repo master:gh-pages
  cd - &> /dev/null
}

check_prerequisites
cd "$BASE_DIR/$LANGUAGE_DIR"
op=$1
[ "$op" ] || op=all
type _$op &> /dev/null || {
  echo "Usage: `basename $0` [build]|<clean|publish>"
  exit 1
}
_$op
